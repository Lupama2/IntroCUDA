Clase 8 o 9:


Q: ¿Qué es OpenACC? ¿Sobre qué placas corre? ¿Para qué sirve?

A:
Hay que saber identificar el paralelismo

Q: ¿Cuál es el problema de eficiencia que suele ocurrir con OpenAcc? ¿Cómo se puede solucionar?

A: Hay un excesivo movimiento de datos por copias de GPU a CPU y visceversa. Las copias innecesarias pueden evitarse usando data regions. Estas definen regiones del código en las cuales los arrays de GPU se quedan en la GPU y son compartidos entre los kernels de la region. Solo salen de la GPU cuando sale de la región.

Q: ¿Cuáles son las "Three rules of GPGPU Programming"? ¿Qué significa GPGPU?


A: Observation has shown that there are three general rules to creating high-performance GPGPU programs:
1. Get the data on the GPGPU and keep it there
2. Give the GPGPU enough work to do
3. Focus on data reuse within the GPGPU to avoid memory bandwidth limitations

GPGPU significa General-Purpose computing on Graphics Processing Units



Cuando con CuPy hago el producto de una matriz definida como sparse con un vector denso, la librería se da cuenta que la matriz es sparse y usa el producto más eficiente

Copiar los google colabs

Ver cómo correr el proyecto de clases en el cluster


Clase n:
Q: ¿Se puede optimizar un producto matricial?

A: Sí. Existen múltiples formas de hacerlo, ya se en GPU o CPU. Existen librerías de bajo y alto nivel que realizan tales operaciones de forma óptima, en base a las propiedades de las matrices (como si son sparse)
-----
Los productos matriciales aparecen en muchos modelos físicos, como en solución de ecuaciones en derivadas parciales, grafos, modelos de epidemias, etc.

Clase n+1:

Q: ¿Cómo puedo resolver una ecuación diferencial que se puede separar en sus modos normales?

A: Con transformada de Fourier! Se puede implementar fácilmente en GPU mediante la librería Cufttp.

Clase 10 u 11:

Q:
¿Cuál es la diferencia entre generar nros random en CPU y GPU?
A:

Q:
¿Cuáles son los problemas asociados a usar GPU?

A:
